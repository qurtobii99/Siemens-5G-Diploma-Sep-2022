/*
 * AWGNChannel.cpp
 *
 *  Created on: Sep 10, 2022
 *      Author: qurtobii99
 */

#include "../headers/AWGNChannel.h"
#include <iostream>
#include <cmath>

AWGNChannel::AWGNChannel() {
	// TODO Auto-generated constructor stub

}

AWGNChannel::~AWGNChannel() {
	// TODO Auto-generated destructor stub
}

float64 AWGNChannel::AWGNChannel_SignalLinearPower(complexNumber signal)
{
	return (pow(signal.real,2)+pow(signal.imaginary,2));
}
complexNumber AWGNChannel::AWGNChannel_NoiseCalculation(float64 snr, float64 signalLinearPower)
{
	/* Seed value holds the key to the series of random numbers
	 * so to have a random number every time, we have to pass a different seed, and since
	 * the timestamp time, holds the number os second passed since 1970, then every time
	 * we will get a new random variable */
	srand((unsigned) time(NULL));
	int random1 = rand();
	int random2 = rand();

	/* noise = squareRoot(noisePower/2) */
	float64 noisePower =(signalLinearPower / pow(10,(snr/10)));
	float64 noise = sqrt(noisePower/ 2);
	complexNumber complexNoise;
	complexNoise.real = noise / (random1 % 10);
	complexNoise.imaginary = noise (random2 % 10);
	return complexNoise;
}


void AWGNChannel::AWGNChannel_TurnOn(const complexNumber* ptr2CPAOutput, int snrDB)
{


	for(int i=0;i<AWGN_CHANNEL_OUTPUT;i++)
	{
		float64 signalLinearPower = AWGNChannel_SignalLinearPower(ptr2CPAOutput[i]);
		complexNumber noise = AWGNChannel_NoiseCalculation(snrDB,signalLinearPower);
		AWGNChannelOutput[i].real = ptr2CPAOutput[i].real + noise.real;
		AWGNChannelOutput[i].imaginary = ptr2CPAOutput[i].imaginary + noise.imaginary;
	}
}
const complexNumber* AWGNChannel::AWGNChannel_GetOutput()
{
	return AWGNChannelOutput;
}
void AWGNChannel::AWGNChannel_PrintOutput()
{
    std::cout << "AWGN channel output: " << std::endl;
    for(int i=0;i<NUMBER_OF_IQ_SAMPLES_AFTER_CP_REMOVER;i++)
    {
    	std::cout<< "(" << AWGNChannelOutput[i].real << ","<<\
    			AWGNChannelOutput[i].imaginary <<")" << std::endl;
    }
    std::cout<<"----------------------------------------"<< std::endl;
}
